from flask import Flask, render_template, Response
import cv2
import numpy as np
from keras.models import model_from_json

app = Flask(__name__)

# Load the model
json_file = open("models/signlanguagedetectionmodel48x48.json", "r")
model_json = json_file.read()
json_file.close()
model = model_from_json(model_json)
model.load_weights("models/signlanguagedetectionmodel48x48.h5")

# Define the label names
label = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I','J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'blank']

def extract_features(image):
    feature = np.array(image)
    feature = feature.reshape(1, 48, 48, 1)
    return feature / 255.0

def predict_sign_language(frame):
    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # Resize the frame to fit the model input
    resized_frame = cv2.resize(gray, (48, 48))
    # Extract features and preprocess
    features = extract_features(resized_frame)
    # Make prediction
    pred = model.predict(features)
    # Get predicted label
    pred_label = label[np.argmax(pred)]
    # Get prediction confidence
    confidence = np.max(pred) * 100
    return pred_label, confidence

def video_stream():
    # Open video capture
    cap = cv2.VideoCapture(0)
    # Define the coordinates of the ROI
    x, y, width, height = 100, 100, 200, 200  # Example coordinates, adjust as needed
    while True:
        # Read a frame from the camera
        ret, frame = cap.read()
        if not ret:
            break
        # Extract the ROI from the frame
        roi = frame[y:y+height, x:x+width]
        # Make prediction for the ROI
        prediction, confidence = predict_sign_language(roi)
        # Display prediction and accuracy on the frame
        cv2.putText(frame, f'{prediction} ({confidence:.2f}%)', (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2, cv2.LINE_AA)
        # Draw a rectangle around the ROI
        cv2.rectangle(frame, (x, y), (x + width, y + height), (255, 0, 0), 2)
        # Encode the frame as JPEG
        ret, buffer = cv2.imencode('.jpg', frame)
        frame_bytes = buffer.tobytes()
        # Yield the frame in byte format
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')




@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video_feed')
def video_feed():
    # Return the response generated by the video_stream function
    return Response(video_stream(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run(debug=True)
